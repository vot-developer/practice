package org.algorithms.coding_patterns.educative.subsets;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/*
Given a word, write a function to generate all of its unique generalized abbreviations.

Generalized abbreviation of a word can be generated by replacing each substring of the word by the count of characters
in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”.
After replacing these substrings in the actual word by the count of characters we get all the generalized abbreviations:
“ab”, “1b”, “a1”, and “2”.
 */
public class GeneralizedAbbreviation {
    //time - O(n*2^n), space - O(n*2^n)
    public static List<String> generateDp(String word) {
        List<String> result = new ArrayList<>();
        doDP(word, result, 0, 0, new StringBuilder());
        return result;
    }

    private static void doDP(String word, List<String> result, int index, int count, StringBuilder sb) {
        if (index == word.length()) {
            if (count != 0)
                sb.append(count);
            result.add(sb.toString());
            return;
        }

        doDP(word, result, index + 1, count + 1, new StringBuilder(sb)); //add number

        if (count != 0)
            sb.append(count);

        sb.append(word.charAt(index));
        doDP(word, result, index + 1, 0, new StringBuilder(sb)); //add symbol
    }


    //time - O(n*2^n), space - O(n*2^n)
    public static List<String> generateGeneralizedAbbreviation(String word) {
        List<String> result = new ArrayList<>();
        Queue<AbbreviatedWord> queue = new LinkedList<>();
        queue.offer(new AbbreviatedWord(new StringBuilder(), 0)); //add first empty element

        for (char c : word.toCharArray()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                AbbreviatedWord ab = queue.poll();

                AbbreviatedWord abSkip = new AbbreviatedWord(ab.str, ab.count + 1); //add number
                queue.offer(abSkip);

                AbbreviatedWord abSymbol = new AbbreviatedWord(ab.str, ab.count); //add symbol
                if (ab.count != 0) {
                    abSymbol.str.append(ab.count);
                    abSymbol.count = 0;
                }
                abSymbol.str.append(c);
                queue.offer(abSymbol);
            }
        }

        while (!queue.isEmpty()) {
            AbbreviatedWord ab = queue.poll();
            if (ab.count != 0)
                ab.str.append(ab.count);
            result.add(ab.str.toString());
        }

        return result;
    }
}

class AbbreviatedWord {
    StringBuilder str;
    int count;

    public AbbreviatedWord(StringBuilder str, int count) {
        this.str = new StringBuilder(str);
        this.count = count;
    }
}
